version: 1.0.{build}

image: Ubuntu

services:
  - docker

# dockerhub credentials encrypted using https://ci.appveyor.com/tools/encrypt
environment:
  DOCKERHUB_USERNAME:
    secure: nskdOtzA4S9nz1hvoQxjUQ==
  DOCKERHUB_PASSWORD:
    secure: 4pugtduAvjmIJGUFRRs+xA==
  IMAGE_TENANTS: micro.services.tenants
  IMAGE_CONTENT: micro.services.content

# install docker compsose
install: 
  - sudo curl -L "https://github.com/docker/compose/releases/download/1.23.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose 
  - sudo chmod +x /usr/local/bin/docker-compose
  - docker version


# build the containers
build_script:
  - sh: docker-compose -f docker-compose.yml build

# run all test scenarios
test_script:  
  - sh: docker-compose -f docker-compose-tests-unit-tenants.yml up --build --force-recreate
  - sh: docker-compose -f docker-compose-tests-unit-content.yml up --build --force-recreate
  - sh: docker-compose -f docker-compose-tests-integration-tenants.yml up --build --force-recreate --exit-code-from micro.services.tenants.integrationtests --abort-on-container-exit
  - sh: docker-compose -f docker-compose-tests-integration-content.yml up --build --force-recreate --exit-code-from micro.services.content.integrationtests --abort-on-container-exit
  - sh: docker-compose -f docker-compose-tests-acceptance.yml up --build --force-recreate --exit-code-from micro.acceptancetests --abort-on-container-exit

# find test output files and post to appveyor api
# note the format is mstest and the files were generated using `dotnet test --logger trx
# https://www.appveyor.com/docs/running-tests/
after_test:
  - sh: find tests -type f -name '*.xml' -print0 | xargs -0 -I '{}' curl -F 'file=@{}' "https://ci.appveyor.com/api/testresults/mstest/$APPVEYOR_JOB_ID"

# login to dockerhub and tag containers
before_deploy:
  - sh: docker login -u="$DOCKERHUB_USERNAME" -p="$DOCKERHUB_PASSWORD"
  - sh: docker tag $IMAGE_TENANTS $DOCKER_USER/$IMAGE_TENANTS:$APPVEYOR_BUILD_NUMBER
  - sh: docker tag $IMAGE_TENANTS $DOCKER_USER/$IMAGE_TENANTS:latest
  - sh: docker tag $IMAGE_CONTENT $DOCKER_USER/$IMAGE_CONTENT:$APPVEYOR_BUILD_NUMBER
  - sh: docker tag $IMAGE_CONTENT $DOCKER_USER/$IMAGE_CONTENT:latest

# tag and push all containers
deploy_script:
  - sh: docker push $DOCKER_USER/$IMAGE_TENANTS
  - sh: docker push $DOCKER_USER/$IMAGE_CONTENT

artifacts:
  - path: '/tests/*.xml'







